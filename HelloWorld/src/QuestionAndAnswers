--------------JAVA---------------
- Java is Platform Independent -> program written in one platform can be run in another. Ex - Code written in Mac can be run in Windows. Possible because of JVM.
- Java is Static Language.
- Default value of Object is NULL. Ex -> String name; -> default value of name is NULL(String is class).
- Objects are stored in HEAP and reference variables are stored in STACK.
- Primitive data types are stored in STACK.
- Java does not have pass-by-reference. Java uses pass-by-value for all variable passing.
- We cannot get address in JAVA.

--------------CONSTRUCTOR---------------
- Constructor is a special function in a class which is called every time when we create an object and allocates some variable.
- Constructor has NO RETURN TYPE.
- If you try to add a return type to a constructor, it will be treated as a method, and the compiler will not recognize it as a constructor.
- A class can have multiple constructors, through a concept called constructor overloading. Constructor overloading allows a class to define multiple constructors with different parameters.
- Using "this" keyword we can call another constructor from one constructor.


--------------final KEYWORD-----------------
- "final" keyword in JAVA is similar to const in other programming language.
- final variable should be always initialized while declaring.
- The immutability that you cannot change the value of the variable for final is true only for primitive data type.
- For non-primitives, when it is final keyword, you cannot change the object to which the reference variable is pointing to but you can change the value of the object.


------------GARBAGE COLLECTION-----------
- JAVA has automatic Garbage collection.
- We can specify some operations to perform when JAVA will do garbage collection -> Using "finalize" method -> somewhat similar to destructors in C++.


--------------PACKAGES--------------
- In Java, a package is a mechanism to organize classes, interfaces, and sub-packages. It acts as a namespace, helping to avoid name conflicts and making code modular, easier to maintain, and reusable.
- Packages can also control access to classes and their members, providing a way to group related types together.
- "lang" Package in JAVA is automatically imported. -> package contains primitives etc.
- "util" Package contains data structures, collection framework etc.


--------------Static KEYWORD---------
- The static keyword in Java is used to indicate that it belongs to the class itself, rather than to any specific instance of the class.
- static member is shared among all instances of the class.
- Memory for a static variable is created only once, at the time of class loading and happens before any object of the class is created.
- Can be accessed using the class name.
- Static members can be accessed without creating an instance of the class.
- Exists throughout the lifecycle of the application.
- Static method can only access static data.
- Non-static method can access static data.

- Static Block only get executed once, when class is loaded before any instance is created.
- Can be used to initialize static variables.

- Nested Classes -> Outer classes can never be static.
- Inner classes can be static as they are dependent on outside class.

------------Singleton Class---------------
- Class which can create only one object.
- How to create?
- Make constructor private and method to return the instance of the class. So even on calling multiple time it returns same instance making sure only one instance is created for the class.



-------------------IMPORTANT-------------------
- The left-hand side can have the parent class type as reference type.
- The other way is NOT POSSIBLE.
- The variables which we can access depends on the left-hand side.
- The object which we are accessing depend on the right-hand side.
- BY DEFAULT -> All classes in JAVA are inherited from the OBJECT class.



-------------OBJECT ORIENTED PROGRAMMING PRINCIPLES-------------------
1. INHERITANCE
- It is actually the type of reference variable and not the type of object which determines which all variables can be accessed.
- "super" keyword directly points to the parent class above it.
- can be used to call the constructor of parent.
- can be used to refer the parent class variable directly.

-?.Multiple Inheritance(A and B, then C extends both A and B) is NOT SUPPORTED in JAVA. WHY?
- if A and B both have same variable and C tries to access that variable, JAVA not sure which to pick them. So not possible in JAVA.
- In a way its possible using INTERFACES(defines what a class does not its values) in JAVA.

- HYBRID Inheritance is a combination of Single and Multiple Inheritance. NOT SUPPORTED in JAVA as Multiple NOT SUPPORTED.
- Possible with INTERFACES.



2. POLYMORPHISM
- Types of Polymorphism:-

    1. Compile Time/ Static Polymorphism  -> Achieved by Method Overloading.
       - Method Overloading Means Method name is same but number of arguments or type of arguments or ordering or return type etc. can be different. Example:- Multiple Constructors. Multiple Methods in the Class with same name.
       - Its called Compile Time Polymorphism because JAVA determines which Method to call during Compile-time.

    2. Run Time/ Dynamic Polymorphism or Late Binding-> Achieved by Method Overriding.
       - Method Overriding -> when the child class has the same method as the parent class. Only the body is different, same name, parameters, return types etc.
       - If the type of Reference Variable is -> Parent Class and the Object is of type -> Child Class.

       - Parent obj = new Child();
       - Here, the Method which is called depends on the Child and the method of the child is called -> This Known as UPCASTING.
       - What variables which we can access depends on the reference variable.
       - Hence Overriding works.

       - ?.How JAVA determines which method to run?
       - Java determines this using DYNAMIC METHOD DISPATCH -> This is why it is called DYNAMIC POLYMORPHISM.
       - During run time only, it determines which method to run.


- We can also use "final" KEYWORD to PREVENT OVERRIDING and also to PREVENT INHERITANCE.
- If we put final keyword with a method then it can't be override.
- final Method can't be overridden and call is resolved at compile time -> this is know as "Early Binding".

- Make the class "final" -> then it can't be  inherited.
- This also implicitly defines all the methods inside the class as final.

- ?. CAN WE OVERRIDE STATIC METHODS?
- NO, STATIC METHODS ARE NOT OVERRIDDEN AS STATIC METHODS DOES NOT DEPEND ON OBJECTS(OVERRIDING DEPENDS ON OBJECTS). IT WILL CALL THE STATIC METHOD IN PARENT ONLY. IT WILL BE INHERITED.

- Both Overloading and Overriding does not apply to instance variables. They only apply on methods.


3. ENCAPSULATION.
- Wrapping up the implementation of the data members and methods in class.
- Solving an implementation level issue.
- Focus on Internal working.


4. ABSTRACTION.
- Hiding the unnecessary details and showing only valuable information.
- Solving a design level issue.
- Focus on External stuff.
- Done by using Abstract classes and Interfaces.


--------ACCESS MODIFIERS--------
1. Private -> for sensitive data -> we can access them using getters and setter.
2. Public -> Access from anywhere.
3. Protected -> don't want it to be accessed from outside the package but can be accessed by Child classes from outside package also.
4. No Modifiers -> Used when we don't want it to be accessed from outside the package.

- By default we can only access the variables inside the Class INSIDE PACKAGE and OUTSIDE PACKAGE NOT ALLOWED.
- For PROTECTED -> in different package it can only be accessed by the Child Class Not the Parent Class itself.


- obj1 == obj2 -> this is practically checking whether these two reference variables are pointing to the same object or not.
- .equals() -> checking the content -> can be overridden.



-------------- ABSTRACT CLASSES ---------------
- If a Class contains one or more ABSTRACT METHODS then the CLASS should also be declared as ABSTRACT.
- Abstract Methods only give the function definition with no body, it is the responsibility of the child to implement the body for the method.
- The Child Class has to override all the methods in the Abstract Class.
- We can have variables in Abstract Class.
- We can also create Constructor in Abstract Class, they will be called by the Child Class using "super" keyword.
- We CANNOT CREATE an OBJECT for ABSTRACT CLASS -> we have to override the methods -> But we can use it as an reference variable.
- We CANNOT CREATE ABSTRACT CONSTRUCTORS.
- Abstract Static Methods -> NOT POSSIBLE -> Abstract methods are for overriding and Static methods Cannot be Overridden -> Therefore, it doesn't make sense.
- STATIC METHODS in Abstract Class is POSSIBLE.
- Normal Method also possible in Abstract Class.
- "final" Abstract Class also NOT POSSIBLE -> "final" makes class not inheritable and cannot override then.


------------------ INTERFACES --------------
- MULTIPLE INHERITANCE is POSSIBLE in JAVA using INTERFACES.
- Variables are STATIC and final by default.
- Contain Abstract Methods.
- Methods are ABSTRACT by default.
- If both interfaces have same method and implementing it, then the class is just implementing it both.
- Classes "implements" interfaces.
- Interfaces can "extend" other interfaces.
- From JAVA8, we can provide default implementations for interface methods.
- STATIC Interface methods should always have a body.

------------------ ANNOTATIONS -------------
- They are also internally interfaces only.


------------------ GENERICS ---------------
- Helps us to store multiple data types -> like creating only template.
- Helps to remove duplicate code.
- type safety -> only the data type specified can be inserted.
- We cannot create an instance of Generic type -> as the byte code won't know about this -> new T[].
- We cannot create static variable of type generic also.
- Overloading of Generics is also not allowed.
- We can use WildCard to restrict the Generic Types -> <T extends Numbers> -> By this we can add Number Class and all the sub-classes of Number Class.
- List<Number> -> Here we can only pass Number class not its subclasses.
- But List<T extends Number> -> Here Number and all its sub-classes are allowed.
- Interface can also have Generic Types.


------------------- OBJECT COMPARISON ---------------
- Object comparison makes use "Comparable" interface.

------------------- Lambda Expressions ---------------
- Similar to arrow functions in JS.
- No function name.
- Lambda Expressions can be assigned to variables that are of type interface -> but the interface can have only 1 method.


-------------------- Exceptions --------------
- Exceptions are recoverable and program can handle it. Errors are not.

                                                        ------- Errors
                 Object Class -> Throwable Class -----
                                                        ------- Exceptions

- Exceptions are of two types:
    1. Checked -> Exceptions which we get during compile time. Eg- trying to open a file and file not there then we get file not found exception.
    2. Unchecked -> Detected only during runtime like divide by zero. Arithmetic Exception.

- "throw" -> to throw an exception.
- "throws" -> it may throw an exception used in class declaration.

---------------- Cloning ---------------
- Can use the clone method in Cloneable interface -> as it is more faster for copying.

----------------- SHALLOW COPY -----------------
- The reference variable is pointing to the same object.
- Here for primitives new variables will be created but for non-primitives they will be pointing to the same object.


----------------- DEEP COPY -------------------
- Here for non-primitives also new object will be created -> they will be different objects.


----------------- COLLECTIONS FRAMEWORK --------------
- In ArrayList multiple threads can access the same object in the same time but not in Vector only one thread can access the object at a time. If the other thread want to access it has to wait.

----------------- ENUM ----------------
- All enum members are public, static, final.
- Since its final we cannot create child enums.
- Enum can implement interfaces -> so can have methods.


------------------- STREAMS ----------------------
- Streams is like a pipeline, through which each element of collections pass through.
- While elements passing through pipeline, we perform various operations like sorting, filtering etc.
- Useful when dealing with "bulk processing" as it can do "parallel processing".
- The original data is not changed.

- 3 step process:
     1. Create Stream: We create the Stream from the data source.
     2. Intermediate Operation(Lazy in nature)[OPTIONAL]: We perform operations like filter, sort etc.. -> they convert one Stream to another. -> can have multiple operations.
     3. Terminal operations[Only 1 allowed on 1 Stream]: are performed like collect(), count() etc. -> Terminal operations trigger the processing of the Stream -> They produce the output(which is new data) and close the Stream.


- Intermediate operations are "Lazy in nature" -> they get executed only when terminal operations are invoked.

- map() -> used to transform each element. ex- like make each string to lowercase.
- flatMap() -> Used to iterate through each element of a complex collection and flatten it.
- peek() -> Helps us to see the intermediate result of the Stream being processed.
- mapToInt() -> Helps to work with primitive "int" data type. Similar methods is present for long, double etc.

- While doing multiple intermediate operation on Stream, as each element is processed sequentially, the element goes through the intermediate operation as maximum asit can. Then the next element go(Checkout the code for POINT 1). Eg: For sorted operation it requires the full Stream.

- "PARALLEL STREAM" -> Helps to perform operation on Stream concurrently, taking advantage of the multi-core CPU.
- ParallelStream() method used instead of regular Stream() method.
- Internally it divides into sub-tasks and do parallel processing and join the result -> "Use Fork-Join Method"
- Each time fork() is called it is divided into sub-tasks.